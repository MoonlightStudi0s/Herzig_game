class GameManager {
    constructor() {
        this.gameId = this.getGameIdFromURL();
        this.username = this.getUsername();
        this.init();
    }

    // –ü–æ–ª—É—á–∞–µ–º ID –∏–≥—Ä—ã –∏–∑ URL
    getGameIdFromURL() {
        const urlParams = new URLSearchParams(window.location.search);
        return urlParams.get('id') || urlParams.get('gameId') || '1'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–≥—Ä–∞ 1
    }

    // –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–º–æ–∂–Ω–æ –∏–∑ localStorage –∏–ª–∏ cookie)
    getUsername() {
        return localStorage.getItem('username') || '–ò–≥—Ä–æ–∫';
    }

    async init() {
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —à–∞–ø–∫–µ
        document.getElementById('username').textContent = this.username;
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã
        await this.loadGameData();
    }

    async loadGameData() {
        try {
            // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ –≤–∞—à–µ–º—É API
            const gameData = await this.fetchGameData(this.gameId);
            this.renderGame(gameData);
        } catch (error) {
            this.showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–≥—Ä—ã: ' + error.message);
        }
    }

    async fetchGameData(gameId) {
        const response = await fetch(`/api/game/${gameId}`);
        if (!response.ok) throw new Error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–≥—Ä—ã");
        return await response.json();
    }


    renderGame(gameData) {
        const gameContent = document.getElementById('game-content');
        
        gameContent.innerHTML = `
            <div class="game-header">
                <h1 class="game-title">${gameData.name}</h1>
                <p>${gameData.description}</p>
            </div>

            <div class="game-info">
                <div class="info-item">ID –∏–≥—Ä—ã: #${gameData.id}</div>
                <div class="info-item">–¢–∏–ø: ${this.getTypeName(gameData.type)}</div>
                <div class="info-item">–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${gameData.duration}</div>
                <div class="info-item">–ò–≥—Ä–æ–∫–∏: ${gameData.players}/${gameData.maxPlayers}</div>
                <div class="info-item">–°—Ç–∞—Ç—É—Å: ${this.getStatusName(gameData.status)}</div>
            </div>

            <div class="game-area">
                <h3>–ò–≥—Ä–æ–≤–∞—è –∑–æ–Ω–∞</h3>
                ${this.renderGameArea(gameData)}
            </div>

            <div class="players-list">
                <h3>–£—á–∞—Å—Ç–Ω–∏–∫–∏ (${gameData.playersList.length})</h3>
                ${gameData.playersList.map(player => `
                    <div class="player-card">
                        <strong>${player}</strong>
                        ${player === this.username ? '<div>üåü –í—ã</div>' : ''}
                    </div>
                `).join('')}
            </div>

            <div class="game-controls">
                ${this.renderControls(gameData)}
            </div>
        `;
    }

    getTypeName(type) {
        const types = {
            'adventure': '–ü—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ',
            'strategy': '–°—Ç—Ä–∞—Ç–µ–≥–∏—è',
            'racing': '–ì–æ–Ω–∫–∏'
        };
        return types[type] || type;
    }

    getStatusName(status) {
        const statuses = {
            'waiting': '‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ',
            'in_progress': 'üéÆ –í –ø—Ä–æ—Ü–µ—Å—Å–µ',
            'finished': '‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∞'
        };
        return statuses[status] || status;
    }

    renderGameArea(gameData) {
        switch (gameData.status) {
            case 'waiting':
                return `
                    <div style="text-align: center; padding: 40px; color: white;">
                        <h4>–û–∂–∏–¥–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤...</h4>
                        <p>–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–æ—Å—å: ${gameData.players}/${gameData.maxPlayers}</p>
                        <button class="control-button" onclick="gameManager.startGame()">
                            –ù–∞—á–∞—Ç—å –∏–≥—Ä—É
                        </button>
                    </div>
                `;
            case 'in_progress':
                return `
                    <div style="text-align: center; padding: 40px; color: white;">
                        <h4>–ò–≥—Ä–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ!</h4>
                        <p>–î–µ–π—Å—Ç–≤—É–π—Ç–µ –±—ã—Å—Ç—Ä–æ, –≤—Ä–µ–º—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ!</p>
                        <div id="game-timer">–û—Å—Ç–∞–ª–æ—Å—å: ${gameData.duration}</div>
                    </div>
                `;
            case 'finished':
                return `
                    <div style="text-align: center; padding: 40px; color: white;">
                        <h4>–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</h4>
                        <p>–ü–æ–±–µ–¥–∏—Ç–µ–ª—å: ${gameData.playersList[0]}</p>
                        <button class="control-button" onclick="gameManager.playAgain()">
                            –ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞
                        </button>
                    </div>
                `;
            default:
                return '<p>–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∏–≥—Ä—ã</p>';
        }
    }

    renderControls(gameData) {
        const controls = [];
        
        if (gameData.status === 'waiting') {
            controls.push('<button class="control-button" onclick="gameManager.leaveGame()">–ü–æ–∫–∏–Ω—É—Ç—å –∏–≥—Ä—É</button>');
            controls.push('<button class="control-button" onclick="gameManager.inviteFriends()">–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π</button>');
        } else if (gameData.status === 'in_progress') {
            controls.push('<button class="control-button" onclick="gameManager.makeMove()">–°–¥–µ–ª–∞—Ç—å —Ö–æ–¥</button>');
            controls.push('<button class="control-button" onclick="gameManager.surrender()">–°–¥–∞—Ç—å—Å—è</button>');
        } else {
            controls.push('<button class="control-button" onclick="gameManager.returnToLobby()">–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ª–æ–±–±–∏</button>');
        }

        return controls.join('');
    }

    // –ú–µ—Ç–æ–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–π
    startGame() {
        alert('–ò–≥—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è!');
        // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã
    }

    leaveGame() {
        if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–∫–∏–Ω—É—Ç—å –∏–≥—Ä—É?')) {
            window.location.href = '/lobby';
        }
    }

    inviteFriends() {
        const link = window.location.href;
        navigator.clipboard.writeText(link).then(() => {
            alert('–°—Å—ã–ª–∫–∞ –Ω–∞ –∏–≥—Ä—É —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!');
        });
    }

    makeMove() {
        alert('–•–æ–¥ —Å–¥–µ–ª–∞–Ω!');
        // –õ–æ–≥–∏–∫–∞ —Ö–æ–¥–∞
    }

    surrender() {
        if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–∞—Ç—å—Å—è?')) {
            alert('–í—ã —Å–¥–∞–ª–∏—Å—å!');
        }
    }

    playAgain() {
        alert('–ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é –∏–≥—Ä—É!');
        // –õ–æ–≥–∏–∫–∞ –Ω–æ–≤–æ–π –∏–≥—Ä—ã
    }

    returnToLobby() {
        window.location.href = '/lobby';
    }

    showError(message) {
        document.getElementById('game-content').innerHTML = `
            <div class="error-message">
                <h2>–û—à–∏–±–∫–∞</h2>
                <p>${message}</p>
                <button class="control-button" onclick="window.location.href='/lobby'">
                    –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ª–æ–±–±–∏
                </button>
            </div>
        `;
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
let gameManager;
document.addEventListener('DOMContentLoaded', () => {
    gameManager = new GameManager();
});